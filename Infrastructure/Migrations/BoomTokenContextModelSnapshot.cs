// <auto-generated />
using System;
using Infrastructure.Dal.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BoomTokenContext))]
    partial class BoomTokenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Improvement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("ImprovementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("improvement_type");

                    b.Property<short>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("ValueIncreased")
                        .HasColumnType("integer")
                        .HasColumnName("value_increased");

                    b.HasKey("Id");

                    b.ToTable("improvement", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3555bbe3-0dc4-431a-9b78-d696af2f15a9"),
                            Cost = 5000,
                            Description = "",
                            ImprovementType = "EnergyLimit",
                            Level = (short)1,
                            Name = "Energy limit lvl 1",
                            ValueIncreased = 50
                        },
                        new
                        {
                            Id = new Guid("cbb334d3-8e7e-4d3b-bca4-898d5337e271"),
                            Cost = 10000,
                            Description = "",
                            ImprovementType = "EnergyLimit",
                            Level = (short)2,
                            Name = "Energy limit lvl 2",
                            ValueIncreased = 50
                        },
                        new
                        {
                            Id = new Guid("7748c297-cd54-4fa7-bafe-0d9c73892d8b"),
                            Cost = 20000,
                            Description = "",
                            ImprovementType = "EnergyLimit",
                            Level = (short)3,
                            Name = "Energy limit lvl 3",
                            ValueIncreased = 100
                        },
                        new
                        {
                            Id = new Guid("243520ac-ad05-4703-b904-e3044ef45d96"),
                            Cost = 35000,
                            Description = "",
                            ImprovementType = "EnergyLimit",
                            Level = (short)4,
                            Name = "Energy limit lvl 4",
                            ValueIncreased = 150
                        },
                        new
                        {
                            Id = new Guid("e9912eec-213f-4be2-bc85-b9f57a44aa25"),
                            Cost = 50000,
                            Description = "",
                            ImprovementType = "EnergyLimit",
                            Level = (short)5,
                            Name = "Energy limit lvl 5",
                            ValueIncreased = 250
                        },
                        new
                        {
                            Id = new Guid("5cd5a851-9d62-44b6-9acf-0d92d5e4b9fa"),
                            Cost = 10000,
                            Description = "",
                            ImprovementType = "SpeedEnergyRecovery",
                            Level = (short)1,
                            Name = "Energy recovery lvl 1",
                            ValueIncreased = 1
                        },
                        new
                        {
                            Id = new Guid("4970dbba-7bbf-429e-81d8-965c4276ede7"),
                            Cost = 20000,
                            Description = "",
                            ImprovementType = "SpeedEnergyRecovery",
                            Level = (short)2,
                            Name = "Energy recovery lvl 2",
                            ValueIncreased = 1
                        },
                        new
                        {
                            Id = new Guid("882b441a-1b74-4748-8b76-fc4c8f227d4d"),
                            Cost = 50000,
                            Description = "",
                            ImprovementType = "SpeedEnergyRecovery",
                            Level = (short)3,
                            Name = "Energy recovery lvl 3",
                            ValueIncreased = 2
                        },
                        new
                        {
                            Id = new Guid("48e1fd52-7253-4f25-8452-c79985b6630a"),
                            Cost = 100000,
                            Description = "",
                            ImprovementType = "SpeedEnergyRecovery",
                            Level = (short)4,
                            Name = "Energy recovery lvl 4",
                            ValueIncreased = 2
                        },
                        new
                        {
                            Id = new Guid("c0900e59-f769-4644-b276-05489f9cbd41"),
                            Cost = 200000,
                            Description = "",
                            ImprovementType = "SpeedEnergyRecovery",
                            Level = (short)5,
                            Name = "Energy recovery lvl 5",
                            ValueIncreased = 5
                        },
                        new
                        {
                            Id = new Guid("cabe8e60-a3f8-41d7-8716-4d482515a7fb"),
                            Cost = 10000,
                            Description = "",
                            ImprovementType = "ProfitPerTap",
                            Level = (short)1,
                            Name = "Tap profit lvl 1",
                            ValueIncreased = 1
                        },
                        new
                        {
                            Id = new Guid("47c05f9c-6198-4e77-ae22-a422005519af"),
                            Cost = 20000,
                            Description = "",
                            ImprovementType = "ProfitPerTap",
                            Level = (short)2,
                            Name = "Tap profit lvl 2",
                            ValueIncreased = 1
                        },
                        new
                        {
                            Id = new Guid("4b85eb67-07a9-449c-ba7a-d353b2df4b78"),
                            Cost = 50000,
                            Description = "",
                            ImprovementType = "ProfitPerTap",
                            Level = (short)3,
                            Name = "Tap profit lvl 3",
                            ValueIncreased = 1
                        },
                        new
                        {
                            Id = new Guid("1170536b-a815-4629-a791-945773c83d9d"),
                            Cost = 150000,
                            Description = "",
                            ImprovementType = "ProfitPerTap",
                            Level = (short)4,
                            Name = "Tap profit lvl 4",
                            ValueIncreased = 2
                        },
                        new
                        {
                            Id = new Guid("ec71173f-b87b-4280-83ca-65d20d88d5e6"),
                            Cost = 250000,
                            Description = "",
                            ImprovementType = "ProfitPerTap",
                            Level = (short)5,
                            Name = "Tap profit lvl 5",
                            ValueIncreased = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.ImprovementAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("IdImprovement")
                        .HasColumnType("uuid")
                        .HasColumnName("id_improvement");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdImprovement");

                    b.HasIndex("IdUser");

                    b.ToTable("improvement_access", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ReferalUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CountTakeFromClick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("count_take_from_click");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<Guid>("IdUserInvited")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user_invited");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserInvited");

                    b.ToTable("referal_users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TaskForReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Link")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("ProgressToCompletion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("progress_to_completion");

                    b.Property<int>("Reward")
                        .HasColumnType("integer")
                        .HasColumnName("reward");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_type");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_type");

                    b.HasKey("Id");

                    b.ToTable("task_for_reward", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea535c8b-4af7-495f-9dbc-c865d428129f"),
                            Description = "",
                            IsActive = false,
                            Link = "https://t.me/rutar33",
                            Name = "Канал LOREM",
                            ProgressToCompletion = 1,
                            Reward = 1000,
                            TargetType = "OpenLink",
                            TaskType = "Single"
                        },
                        new
                        {
                            Id = new Guid("51e9172b-cc89-47ab-92b1-3faaace653ac"),
                            Description = "",
                            IsActive = false,
                            Link = "https://t.me/Dartist1",
                            Name = "Канал ISPUM",
                            ProgressToCompletion = 1,
                            Reward = 1000,
                            TargetType = "OpenLink",
                            TaskType = "Single"
                        },
                        new
                        {
                            Id = new Guid("4f4e507e-5d2e-474c-9378-366322781fcd"),
                            Description = "",
                            IsActive = false,
                            Link = "https://t.me/Dartist1",
                            Name = "Канал OLEG",
                            ProgressToCompletion = 1,
                            Reward = 1000,
                            TargetType = "OpenLink",
                            TaskType = "Single"
                        },
                        new
                        {
                            Id = new Guid("08e7dd67-0935-434f-9d64-a7d5b78734e5"),
                            Description = "",
                            IsActive = false,
                            Name = "Накликать 1.5к раз",
                            ProgressToCompletion = 1500,
                            Reward = 3000,
                            TargetType = "Tap",
                            TaskType = "EveryDay"
                        },
                        new
                        {
                            Id = new Guid("831824be-e7db-4128-be5b-c4ccf84fc9ed"),
                            Description = "",
                            IsActive = false,
                            Name = "Пригласить друга",
                            ProgressToCompletion = 1,
                            Reward = 3000,
                            TargetType = "ReferalInvite",
                            TaskType = "EveryDay"
                        },
                        new
                        {
                            Id = new Guid("0610d647-758b-4866-990c-3c5fd047075a"),
                            Description = "",
                            IsActive = false,
                            Link = "https://t.me/rutar33",
                            Name = "Канал Boom token",
                            ProgressToCompletion = 1,
                            Reward = 500,
                            TargetType = "OpenLink",
                            TaskType = "EveryDay"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TaskForRewardAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CurrentValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("current_value");

                    b.Property<DateTime?>("DateTimeCompleted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time_completed");

                    b.Property<Guid>("IdTaskForReward")
                        .HasColumnType("uuid")
                        .HasColumnName("id_task_for_reward");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdTaskForReward");

                    b.HasIndex("IdUser");

                    b.ToTable("task_for_reward_access", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("balance");

                    b.Property<long>("CountClick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("count_click");

                    b.Property<DateTime>("DateTimeRegistration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time_registration");

                    b.Property<int>("Energy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(500)
                        .HasColumnName("energy");

                    b.Property<int>("EnergyRecoveryInSecond")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("energy_recovery_in_second");

                    b.Property<int>("LimitEnergy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(500)
                        .HasColumnName("limit_energy");

                    b.Property<string>("RangTap")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rang_tap");

                    b.Property<string>("ReferalLink")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("referal_link");

                    b.Property<int>("RewardForClick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("reward_for_click");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ImprovementAccess", b =>
                {
                    b.HasOne("Domain.Entities.Improvement", "Improvement")
                        .WithMany()
                        .HasForeignKey("IdImprovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Improvement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ReferalUsers", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UserInvited")
                        .WithMany()
                        .HasForeignKey("IdUserInvited")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserInvited");
                });

            modelBuilder.Entity("Domain.Entities.TaskForRewardAccess", b =>
                {
                    b.HasOne("Domain.Entities.TaskForReward", "TaskForReward")
                        .WithMany()
                        .HasForeignKey("IdTaskForReward")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskForReward");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
